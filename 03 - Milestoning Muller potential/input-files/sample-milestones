#!/usr/bin/env python

import os
import sys
import math
import random
import logging
import itertools

import numpy as np
import scipy.spatial as spatial

import milestoning.utils as utils
from milestoning.milestones import Milestone
from milestoning.simulation import Simulation
from milestoning.transition import Transition
from milestoning.muller import Potential


VALID_INDICES = [11, 21, 31, 41, 51, 61, 71]


def projector(milestone):
    '''Projection operator onto milestone.'''
    a = milestone.anchors[0].coordinates
    b = milestone.anchors[1].coordinates
    v = b - a
    e = np.array([v[1], -v[0]])
    e /= np.linalg.norm(e)

    return e


class Metropolis:
    '''Metropolis sampler.'''
    def __init__(self, potential, temperature, delta, initial_point,
                 milestone):
        self.potential = potential
        self.temperature = temperature

        self.delta = delta

        self.current_point = initial_point
        self.milestone = milestone
        self.dim = initial_point.shape[0]
        self.probability = self.compute_probability(initial_point)

        self.accepted = 1
        self.total = 1

        self.reporter = None
        self.unit_vector = projector(milestone)

    def __repr__(self):
        return ('{}({}, {}, {}, {})'.format(self.__class__.__name__,
                                            self.potential,
                                            self.temperature,
                                            self.delta,
                                            self.current_point))

    def __iter__(self):
        return self

    def __next__(self):
        # r = self.delta * (2 * np.random.rand(self.dim) -
        #                   np.ones(self.dim))
        r = (self.delta * (2.0 * random.random() - 1.0)
             * self.unit_vector)

        candidate = self.current_point + r

        p_old = self.probability
        p_new = self.compute_probability(candidate)

        # print(self.current_point, p_old, candidate, p_new)

        if self.reporter.next(candidate, 0) is not None:
            # We reject any point outside of the prescribed milestone.
            ratio = 0.0
            self.reporter.first(self.current_point, self.milestone)
            # print('Rejecting {}'.format(candidate))
        else:
            try:
                ratio = p_new / p_old
            except ZeroDivisionError:
                ratio = np.inf

        # print('Ratio: {}'.format(ratio))

        if ratio >= 1 or random.random() < ratio:
            # Accept the candidate point.
            self.current_point = candidate
            self.probability = p_new
            self.accepted += 1
            self.reporter.next(candidate, np.nan)

        self.total += 1

        # print(self.current_point[0], self.current_point[1])

        return self.current_point

    def get_acceptance_ratio(self):
        '''Obtain acceptance ratio so far.'''
        return self.accepted / self.total

    def compute_probability(self, point):
        return math.exp(-self.potential(point) / self.temperature)


class Sampler:
    def __init__(self, temperature: float, delta: float,
                 start: int, stop: int, step: int, config_file: str) -> None:
        config_file = os.path.expanduser(config_file)
        self.simulation = Simulation(config_file, catch_signals=True,
                                     setup_reactants_and_products=False)

    def sample_all(self) -> None:
        '''Sample all milestones.

        '''
        def extract_points(voronoi, milestones, dx=1e-1):
            '''Obtain points on each milestone (ridge).'''
            vertices_points = zip(voronoi.ridge_vertices,
                                  voronoi.ridge_points)
            for vertex_indices, anchor_indices in vertices_points:
                milestone = milestones.make_from_indices(anchor_indices[0],
                                                         anchor_indices[1])

                if -1 not in vertex_indices:
                    point = np.sum(voronoi.vertices[vertex_indices, :],
                                   axis=0) / 2
                else:
                    v = projector(milestone)
                    vertex_indices.sort()
                    idx = vertex_indices[-1]
                    point = voronoi.vertices[idx, :] + dx * v

                yield milestone, point

        simulation = self.simulation
        milestones = simulation.milestones

        anchors = milestones.anchors
        coordinates = [anchor.coordinates for anchor in anchors]
        voronoi = spatial.Voronoi(np.array(coordinates))
        for milestone, point in extract_points(voronoi, milestones):
            if milestone.index in VALID_INDICES:
                self.sample(milestone, point)

    def sample(self, milestone: Milestone, point: np.array) -> None:
        '''Draw samples from a given milestone.

        Parameters
        ----------
        milestone: Milestone
            Milestone to sample from.

        point: np.array
            Two-dimensional point where the sampling should start.

        '''
        U = Potential()

        logging.info('Sampling at {}...'.format(milestone))

        simulation = self.simulation
        database = simulation.database

        reporter = simulation.make_reporter()
        reporter.first(point, milestone)

        metropolis = Metropolis(U, temperature, delta, point,
                                milestone)
        metropolis.reporter = reporter

        it = itertools.islice(metropolis, start, stop, step)
        for time, point in enumerate(it):
            filename = os.path.join(simulation.configuration.temp_dir,
                                    utils.get_random_name())
            with open(filename, 'w') as f:
                print(point[0], point[1], file=f)

            transition = Transition(milestone, None, point, None,
                                    filename)
            database.insert_transition(transition)

        database.save()

        logging.debug('Acceptance ratio at {}: {:.4f} ({}/{})'
                     .format(milestone,
                             metropolis.accepted / metropolis.total,
                             metropolis.accepted, metropolis.total))


if __name__ == '__main__':
    if len(sys.argv) < 7:
        print('Usage: {} TEMPERATURE DELTA START STOP STEP CONFIG-FILE'
              .format(sys.argv[0]))
        sys.exit(-1)

    temperature = float(sys.argv[1])
    delta = float(sys.argv[2])
    start = int(sys.argv[3])
    stop = int(sys.argv[4])
    step = int(sys.argv[5])
    config_file = sys.argv[6]

    sampler = Sampler(temperature, delta, start, stop, step,
                      config_file)

    import warnings

    with warnings.catch_warnings():
        warnings.simplefilter('ignore')
        sampler.sample_all()
